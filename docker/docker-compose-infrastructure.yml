version: "3.8"

services:
  zookeeper:
    container_name: zookeeper-container
    image: bitnami/zookeeper:latest
    restart: always
    ports:
      - 2181:2181 # docker host port / container port
    environment:
      - ALLOW_ANONYMOUS_LOGIN=${ALLOW_ANONYMOUS_LOGIN}
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_CLIENT_PORT}
      - ZOOKEEPER_TICK_TIME=${ZOOKEEPER_TICK_TIME}
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - ${BACKEND_NETWORK}
    deploy:
      replicas: 1

  kafka:
    container_name: kafka-container
    image: bitnami/kafka:latest
    restart: always
    ports:
      - 9092:9092 # docker host port / container port
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID}
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_CLIENT_PORT}
      - ALLOW_PLAINTEXT_LISTENER=${ALLOW_PLAINTEXT_LISTENER}
      - KAFKA_LISTENERS=${KAFKA_INTER_BROKER_LISTENER_NAME}://:${KAFKA_BROKER_PORT}
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:${KAFKA_BROKER_PORT}
      - KAFKA_INTER_BROKER_LISTENER_NAME=${KAFKA_INTER_BROKER_LISTENER_NAME}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      - KAFKA_HEAP_OPTS=-Xmx320m -Xms320m
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper
    networks:
      - ${BACKEND_NETWORK}
    deploy:
      replicas: 1

  mongo:
    container_name: mongodb-container
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017 # docker host port / container port
    expose:
      - 27017 # opens port 27017 on the container
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE} # the database
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME} # the database admin user
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD} # the database admin user password
    volumes:
      - mongodb_data:/data/db
    networks:
      - ${BACKEND_NETWORK}
    deploy:
      replicas: 1

  mongo-express:
    container_name: mongo-express-container
    image: mongo-express:latest
    restart: always
    ports:
      - 8088:8081 # docker host port / container port
    environment:
      - ME_CONFIG_MONGODB_SERVER=${ME_CONFIG_MONGODB_SERVER}
      - ME_CONFIG_MONGODB_AUTH_USERNAME=${ME_CONFIG_MONGODB_AUTH_USERNAME} # username for admin access
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=${ME_CONFIG_MONGODB_AUTH_PASSWORD} # password for admin access
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}
      - ME_CONFIG_MONGODB_PORT=${ME_CONFIG_MONGODB_PORT}
      - ME_CONFIG_MONGODB_AUTH_DATABASE=${ME_CONFIG_MONGODB_AUTH_DATABASE}
    depends_on:
      - mongo
    networks:
      - ${BACKEND_NETWORK}
    deploy:
      replicas: 1

  mariadb:
    container_name: mariadb-container
    image: bitnami/mariadb:latest
    restart: always
    ports:
      - 3306:3306 # docker host port / container port
    expose:
      - 3306 # opens port 3306 on the container
    environment:
      - MARIADB_ROOT_USER=${MARIADB_ROOT_USER} # the database admin user
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD} # the database admin user password
    volumes:
      - mariadb_data:/bitnami/mariadb
    networks:
      - ${BACKEND_NETWORK}
    deploy:
      replicas: 1

  adminer:
    container_name: adminer-container
    image: adminer:latest
    ports:
      - 9080:8080 # docker host port / container port
    networks:
      - ${BACKEND_NETWORK}
    deploy:
      replicas: 1

  cache:
    container_name: redis-container
    image: redis:latest
    restart: always
    ports:
      - 6379:6379 # docker host port / container port
    command: redis-server --save 20 1 --loglevel warning --requirepass MDNcVb924a
    environment:
      - REDIS_REPLICATION_MODE=master
    volumes:
      - cache_data:/data
    networks:
      - ${BACKEND_NETWORK}
    deploy:
      replicas: 1

# persistent volumes location
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  mongodb_data:
    driver: local
  mariadb_data:
    driver: local
  cache_data:
    driver: local

# networks
networks:
  rps_net:
    name: ${BACKEND_NETWORK}
