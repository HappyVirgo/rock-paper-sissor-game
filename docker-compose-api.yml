version: "3.8"

services:
  # Nginx reverse proxy server acts as api gateway.
  nginx:
    container_name: nginx
    image: nginx:${NGINX_VERSION}
    hostname: ${NGINX_HOSTNAME}
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    restart: always
    ports: # Important: In a production environment you should remove the external port that kept here for debugging purposes.
      - 80:80 # NGINX HTTP, external port / container port
    #      - 443:443 # NGINX HTTPS, external port / container port
    volumes:
      - ./infrastructure/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./infrastructure/ssl:/ssl
    depends_on:
      - rps-cmd-service
      - rps-qry-service
      - score-cmd-service
      - score-qry-service
    networks:
      - ${BACKEND_NETWORK}
    deploy:
      replicas: 1

  # The Rock Paper Scissors game command microservice provides REST and gRPC APIs for the RPS game.
  rps-cmd-service:
    container_name: rps-cmd-service
    image: hokushin/rps-cmd-service:${RPS_CMD_SRV_VERSION}
    hostname: ${RPS_CMD_SRV_HOSTNAME}
    restart: always
    ports: # Important: In a production environment you should remove the external port that kept here for debugging purposes.
      - 8081:80 # external port / container port
      - 6566:6565 # external port / container port
    networks:
      - ${BACKEND_NETWORK}
    depends_on:
      - mongo
      - kafka-1
      - kafka-2
      - kafka-3
    deploy:
      replicas: 1

  # The Rock Paper Scissors game query microservice provides REST and gRPC APIs for the RPS game.
  rps-qry-service:
    container_name: rps-qry-service
    image: hokushin/rps-qry-service:${RPS_QRY_SRV_VERSION}
    hostname: ${RPS_QRY_SRV_HOSTNAME}
    restart: always
    ports: # Important: In a production environment you should remove the external port that kept here for debugging purposes.
      - 8082:80 # external port / container port
      - 6567:6565 # external port / container port
    networks:
      - ${BACKEND_NETWORK}
    depends_on:
      - mariadb
      - kafka-1
      - kafka-2
      - kafka-3
    deploy:
      replicas: 1

  # The Score command microservice provides REST and gRPC APIs for the RPS game.
  score-cmd-service:
    container_name: score-cmd-service
    image: hokushin/score-cmd-service:${SCORE_CMD_SRV_VERSION}
    hostname: ${SCORE_CMD_SRV_HOSTNAME}
    restart: always
    ports: # Important: In a production environment you should remove the external port that kept here for debugging purposes.
      - 8083:80 # external port / container port
      - 6568:6565 # external port / container port
    networks:
      - ${BACKEND_NETWORK}
    depends_on:
      - mongo
      - kafka-1
      - kafka-2
      - kafka-3
    deploy:
      replicas: 1

  # The Score query microservice provides REST and gRPC APIs for the RPS game.
  score-qry-service:
    container_name: score-qry-service
    image: hokushin/score-qry-service:${SCORE_QRY_SRV_VERSION}
    hostname: ${SCORE_QRY_SRV_HOSTNAME}
    restart: always
    ports: # Important: In a production environment you should remove the external port that kept here for debugging purposes.
      - 8084:80 # external port / container port
      - 6569:6565 # external port / container port
    networks:
      - ${BACKEND_NETWORK}
    depends_on:
      - mariadb
      - kafka-1
      - kafka-2
      - kafka-3
    deploy:
      replicas: 1

  # The WebStatus application monitors microservices health
  webstatus:
    container_name: webstatus
    hostname: webstatus
    build:
      context: .
      dockerfile: ./docker/webstatus/Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - HealthChecksUI__HealthChecks__0__Name=RPS Game Command Microservice Health Check
      - HealthChecksUI__HealthChecks__0__Uri=http://host.docker.internal/rps-cmd-api/actuator/health
      - 50880:80 # external port / container port
    networks:
      - ${BACKEND_NETWORK}
    depends_on:
      - nginx
    deploy:
      replicas: 1

# networks
networks:
  rps_net:
    name: ${BACKEND_NETWORK}
